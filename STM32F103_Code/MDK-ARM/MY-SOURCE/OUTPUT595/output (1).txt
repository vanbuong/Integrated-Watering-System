#include "output.h"

uint16_t dataOutput = 0;

void init_output(void)
{
	GPIO_InitTypeDef PORT;
	SPI_InitTypeDef SPI;
	// SPI1
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO,ENABLE);
	// Configure SPI pins
	PORT.GPIO_Speed = GPIO_Speed_50MHz;
	PORT.GPIO_Pin = SPI_SCK_PIN | SPI_MOSI_PIN;
	PORT.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIO_Init(SPI_GPIO_PORT,&PORT);

	PORT.GPIO_Pin = SPI_LATCH_PIN;
	PORT.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_Init(SPI_GPIO_PORT,&PORT);
	
	
	SPI.SPI_Mode = SPI_Mode_Master;
	SPI.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_16;
	SPI.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
	SPI.SPI_CPOL = SPI_CPOL_Low;
	SPI.SPI_CPHA = SPI_CPHA_1Edge;
	SPI.SPI_CRCPolynomial = 7;
	SPI.SPI_DataSize = SPI_DataSize_8b;
	SPI.SPI_FirstBit = SPI_FirstBit_MSB;
	SPI.SPI_NSS = SPI_NSS_Soft;
	SPI_Init(SPI_PORT,&SPI);

	// NSS must be set to '1' due to NSS_Soft settings (otherwise it will be Multimaster mode).
	SPI_NSSInternalSoftwareConfig(SPI_PORT,SPI_NSSInternalSoft_Set);
	SPI_Cmd(SPI_PORT,ENABLE);
}

uint8_t SPI_SendByte(uint8_t byte)
{
  /*!< Loop while DR register in not emplty */
  while (SPI_I2S_GetFlagStatus(SPI_PORT, SPI_I2S_FLAG_TXE) == RESET);

  /*!< Send byte through the SPI1 peripheral */
  SPI_I2S_SendData(SPI_PORT, byte);

  /*!< Wait to receive a byte */
  while (SPI_I2S_GetFlagStatus(SPI_PORT, SPI_I2S_FLAG_RXNE) == RESET);

  /*!< Return the byte read from the SPI bus */
  return SPI_I2S_ReceiveData(SPI_PORT);
}

void LatchOutput(void)
{
	volatile uint16_t cnt = 0;

	SPI_SendByte(dataOutput>>8);
	for (cnt = 0; cnt < 20; cnt++);
	SPI_SendByte(dataOutput);
	for (cnt = 0; cnt < 20; cnt++);
	
	GPIO_ResetBits(SPI_GPIO_PORT, SPI_LATCH_PIN);
	for (cnt = 0; cnt < 30; cnt++);
	GPIO_SetBits(SPI_GPIO_PORT, SPI_LATCH_PIN);
}

void OpenOutput(uint8_t index) //high active
{
	if(index < 16)
	{
		dataOutput = dataOutput | ((uint16_t)1<<index);
	}
	LatchOutput();
}

void OpenAllOutput(void)
{
	dataOutput = 0x0001;
	LatchOutput();
}

void CloseOutput(uint8_t index) 
{
	if((index > 0) && (index < 16))
	{
		dataOutput = dataOutput & ~((uint16_t)1<<index);
	}
	LatchOutput();
}

void CloseAllOutput(void)
{
	dataOutput = 0x0000;
	LatchOutput();
}

